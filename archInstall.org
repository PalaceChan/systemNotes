* reference guides on youtube
https://www.youtube.com/watch?v=DPLnBPM4DhI "Arch Linux: Full Installation Guide - A complete tutorial/walthrough in one video!"
* create iso image
download an iso like this
#+begin_src bash
rsync -av rsync://mirror.adectra.com/archlinux/iso/2024.11.01/ ./arch-iso-20241101/
#+end_src
then cat it into the usb drive (lsblk or fdisk -lu to find which device it is)
#+BEGIN_SRC bash
sudo -i
cat /path/to/the.iso > /dev/sdb # usually it is /dev/sdb as main disk is sda
sync
exit
#+END_SRC
to make the thumb drive usable again after that one must repartition like this:
#+BEGIN_SRC bash
sudo wipefs --all /dev/sdx
sudo fdisk /dev/sdx #followed by g, n, <RET> to make single partition and w to commit
sudo mkfs.ext4 /dev/sdx1 #to put a fresh file system into the partition made above
#+END_SRC
* boot into image, get internet, set time, partition
need to verify in UEFI mode by checking for presence of ~file /sys/firmware/efi/efivars~
next internet run ~wifi-menu~ and check with ~ip a~ or ~ping -c 2 www.google.com~
if that is fine next steps are a quick time set
#+BEGIN_SRC bash
timedatectl status #to check
timedatectl set-ntp true
#+END_SRC
next
#+BEGIN_SRC bash
pacman -Syyy #sync latest
fdisk /dev/sdx #your disk - type g for a new GPT partition table
#+END_SRC
make an EFI partition about 500MB, a boot about 500MB and last partition fill it up and type ~t~
to pick type 31/43 (LVM) for it then finalize (check types with L)
then first two filesystems:
#+BEGIN_SRC bash
mkfs.fat -F32 /dev/sdx1 #EFI
mkfs.ext4 /dev/sdx2 #Boot
#+END_SRC
for the last one try ~modprobe dm_mod~ to see =/dev/mapper= if not just make the volumes with /dev/sdx3 directly like
#+BEGIN_SRC bash
pvcreate --dataalignment 1m /dev/mapper/lvm #or /dev/sdx3
vgcreate vg0 /dev/mapper/lvm #or /dev/sdx3
lvcreate -L 30GB vg0 -n lv_root
lvcreate -L 500GB vg0 -n lv_home
modprobe dm_mod
vgscan
vgchange -ay
#+END_SRC
next make file systems and mount everything:
#+BEGIN_SRC bash
mkfs.ext4 /dev/vg0/lv_root
mkfs.ext4 /dev/vg0/lv_home
mount /dev/vg0/lv_root /mnt
mkdir /mnt/boot /mnt/home /mnt/etc
mount /dev/sdx2 /mnt/boot
mount /dev/vg0/lv_home /mnt/home
#+END_SRC

with everything mounted make the =fstab= file and strap on:
#+BEGIN_SRC bash
genfstab -U -p /mnt >> /mnt/etc/fstab
pacstrap -i /mnt base
arch-chroot /mnt
#+END_SRC
* initial setup now in your ssd
first set the timezone and hwclock
#+BEGIN_SRC bash
ln -sf /usr/share/zoneinfo/Region/City /etc/localtime
hwclock --systohc
#+END_SRC
name your host by editing or creating =/etc/hostname= with name
and then editing =/etc/hosts= to contain
#+BEGIN_EXAMPLE
127.0.0.1 localhost
::1       localhost
127.0.1.1 yourhostname.localdomain yourhostname
#+END_EXAMPLE
some packages to install
#+BEGIN_SRC bash
pacman -S base-devel grub efibootmgr dosfstools mtools linux-headers networkmanager wpa_supplicant wireless_tools emacs
systemctl enable NetworkManager
#+END_SRC
now edit ~/etc/mkinitcpio.conf~ and in =HOOKS= between =block= and =filesystems= add =lvm2= entry
and then one can run
#+BEGIN_SRC bash
mkinitcpio -p linux
#+END_SRC
generate locale by uncommenting =en_US.UTF-8= in =/etc/locale.gen= and running ~locale-gen~
set the root passwd ~passwd~ add your user ~useradd -m -g users -G wheel bla~ and ~passwd bla~
if sudo not installed, install it (can check with ~pacman -Q sudo~) and allow wheel group by running
~EDITOR='emacs -nw' visudo~ and uncommenting =%wheel ALL=(ALL) ALL=
next ready grub like so
#+BEGIN_SRC bash
grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck
cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo #might have to mkdir the destination
grub-mkconfig -o /boot/grub/grub.cfg
#+END_SRC
(in unlikely case of not using uefi the grub-install command is likely ~grub-install --target=i386-pc --recheck /dev/sda~)
finally make a swapfile and add it to fstab like so
#+BEGIN_SRC bash
dd if=/dev/zero of=/swapfile bs=1M count=8000 status=progress
chmod 600 /swapfile
mkswap /swapfile
cp /etc/fstab /etc/fstab.bak
echo '/swapfile none swap sw 0 0' | tee -a /etc/fstab
#+END_SRC
ready to go at this point so ~exit; umount -R /mnt; reboot~
* upon boot
verify everything works then recommend ~reboot~ and in grub menu type =e= to edit the kernel params
and add ~mitigations=off~ to avoid having poor performance for stupid reasons. after booting
check via ~cat /proc/cmdline~ and ~lscpu~ and make it persistent via ~/etc/default/grub~ adding it to
the =GRUB_CMDLINE_LINUX_DEFAULT= line.
next install quite a few more useful packages
#+BEGIN_SRC bash
  sudo pacman -S r gcc-fortran openblas turbostat xorg-server xorg-xinit xorg-xprop xorg-xset rxvt-unicode dmenu
  sudo pacman -S tree ripgrep the_silver_searcher parallel alsa-utils wget
  sudo pacman -S firefox pulseaudio xorg-xrandr xorg-wininfo xorg-xprop xorg-xdpyinfo xdpyinfo
  sudo pacman -S pavucontrol bc gdb htop paccache pacman-contrib

  sudo pacman -S base-devel inetutils cmake tk man rsync #inetutils for hostname and tk for R menu
  sudo pacman -S bind #dnsutils like host and nslookup
#+END_SRC
if old laptop also grab =linux-firmware=

get sensors to be able to monitor system
#+BEGIN_SRC bash
sudo pacman -S lm_sensors
sudo sensors-detect
#+END_SRC
install nvidia requirements and reboot/upgrade system until able to detect card
#+BEGIN_SRC bash
sudo pacman -S nvidia nvidia-utils nvidia-settings
sudo nvidia-xconfig #once installed
sudo mv /etc/X11/xorg.conf /etc/X11/xorg.confg.d/20-nvidia.conf
#+END_SRC
use sudo ~nvidia-settings~ for future monitor additions and updates to displays
edit =/etc/makepkg.conf= (in particular MAKEFLAGS -j) to match server capacity

set up a global gitignore (and github auth)
#+begin_src bash
  git config --global core.excludesFile ~/.gitignore
  git config --global --add github.user <user>
  git config --global --add github.oauth-token <token>
#+end_src
* openbox
#+BEGIN_SRC bash
sudo pacman -S openbox obconf
#+END_SRC
then add exec openbox-session to bottom of xinitrc
* lvm snapshots
use a command like this to backup root filesystem regularly
#+BEGIN_SRC bash
sudo lvcreate -L 8GB -s -n root_snapshot_YYYYMMDD /dev/mapper/vg0-lv_root
sudo lvs #display existing
#+END_SRC
to purge an old snapshot
#+BEGIN_SRC bash
sudo lvremove /dev/vg0/root_snapshot_YYYYMMDD
#+END_SRC
you can check volume group stats (like free space) with ~sudo vgs~
* multiple monitors
use ~xprop | grep CLASS~ command (package =xorg-xprop=) to click on windows and see their class names
* audio
run ~alsamixer~ to ensure channels are unmuted, run ~speaker-test~ to test
if there is annoying beep, alsamixer might have a beep channel, mute it with =M=
* miscellaneous packages
Useful packages to have on any system
|------------------+------------------------------------------+---------------------------------------------------------------------------------------------|
| Package          | Notes                                    | Command                                                                                     |
|------------------+------------------------------------------+---------------------------------------------------------------------------------------------|
| isync            | yields mbsync used by mu4e to pull email | ~sudo pacman -S isync~                                                                        |
| mu-git           | mu and mu4e in AUR                       | ~git clone https://aur.archlinux.org/mu.git~ then ~makepkg -si~                                 |
| virtualbox       | needs AUR extension                      | ~sudo pacman -S virtualbox~ ~git git clone https://aur.archlinux.org/virtualbox-ext-oracle.git~ |
| telegram-desktop |                                          | ~sudo pacman -S telegram-desktop~                                                             |
| telega           | emacs equivalent (see packageNotes.org)  | AUR for tdlib, git from src for the rest (incuding a C server)                              |
| mlocate          | for updatedb to do custom helm locates   | ~sudo pacman -S mlocate~                                                                      |
| ctags            | to generate TAGS                         | ~sudo pacman -S ctags~                                                                        |
| clang            | llvm frontend                            | ~sudo pacman -S clang~                                                                        |
| llvm             | llvm libs                                | ~sudo pacman -S llvm~                                                                         |
| lsof             |                                          | ~sudo pacman -S lsof~                                                                         |
| strace           |                                          | ~sudo pacman -S strace~                                                                       |
| valgrind         |                                          | ~sudo pacman -S valgrind~                                                                     |
| stdman           | c++11/14 man pages                       | ~git clone https://aur.archlinux.org/stdman-git.git~  then ~makepkg -si~                        |
| python-black     | /usr/bin/black                           | ~sudo pacman -S python-black~                                                                 |
| python-pip       |                                          | ~sudo pacman -S python-pip~                                                                   |
| jupyterlab       | for elpy use of course                   | ~sudo pacman -S jupyterlab~                                                                   |
| perf             | perf events                              | ~sudo pacman -S perf~                                                                         |
| peek             | gif recorder                             | ~sudo pacman -S peek~                                                                         |
| ghostscript      | pdf manip                                | ~sudo pacman -S ghostscript~                                                                  |
| pdftk            | pdf manip                                | ~sudo pacman -S pdftk~                                                                        |
| libvterm         | for vterm in emacs                       | ~sudo pacman -S libvterm~                                                                     |
| texlive-most     | covers needs for tex                     | ~sudo pacman -S texlive-most~                                                                 |
| qpdf             | encrypt/decrypt pdfs                     | ~sudo pacman -S qpdf~                                                                         |
| xournalpp        | annotate pdfs (e.g. to sign them)        | ~sudo pacman -S xournalpp~                                                                    |


* external drive backups
first time only need to make a partition on the external drive and then an ext4 fs.
for the partition just do ~sudo fdisk~ on the device (e.g. /dev/sda) and ~g~ for GPT label
then ~n~ for new partition (all defaults fine to use the whole thing) then ~w~ to save that

then e.g. ~sudo mkfs.ext4 /dev/sda1~ to get the fs done and then just ~sudo mount -t ext4 /dev/sda1 /mnt~
and it useable

for backups get timeshift from AUR, run as sudo timeshift-gtk from commandline (it can auto mount external drive above)

* lifetime notes
** If ~timedatectl status~ shows NPT off (or clock looks off) just run ~timedatectl set-ntp true~
** to ssh/scp stuff across two of these
#+begin_src bash
systemctl start sshd
ip -br a # see ip addr this way the 192.*
# ssh username@<the ip> from other computer
systemctl stop sshd # when done
#+end_src

for a smart merge using rsync see https://superuser.com/questions/547282/which-is-the-rsync-command-to-smartly-merge-two-folders
so basically ~rsync -abviuzPc src/ dest/~ (the =-c= flag uses checksums rather than timestamps when comparing =-n= to sanity check and remove =-b= if want no backups created)
** annotating a pdf, unencrypting and decrypting
use xournal++ (package xournalpp) to open it, can use text box or draw. Then export it as pdf.
To decrypt a pdf: ~qpdf --password='pwd' --decrypt input.pdf output.pdf~
To encrypt a pdf: ~qpdf --encrypt 'pwd' 'pwd' 256 -- input.pdf output.pdf~
(the first password is to open, the second is to allow modifying/printing/annotating/extracting content)
* updating mirrors
from https://wiki.archlinux.org/title/mirrors
go to https://archlinux.org/mirrorlist/ to get a new list and replace below (=/sudo::/path/to/file= for tramp)
#+begin_src bash
  cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
#+end_src
* updating arch
if invalid or corrupted packages upgrade keyring with ~sudo pacman -S archlinux-keyring~
if root partition full error clear cache all except most recent version with ~sudo paccache -rk1~ reference: https://ostechnix.com/recommended-way-clean-package-cache-arch-linux/
if a package conflicts and get asked to remove can check what deps on it via ~pacman -Qi pkggname~

steps are:
- use ~sudo lvcreate -L18GB -s -n root_snapshot_$(date +'%Y%m%d') /dev/mapper/vg0-lv_root~ to save state
- use ~sudo pacman -Syu --ignore emacs~ to upgrade
- reboot
- use ~sudo lvremove /dev/vg0/root_snapshot_20210117~ to remove the oldest snapshot
* removing packages
[[https://wiki.archlinux.org/title/pacman#Removing_packages][wiki]]

look for them with ~pacman -Q | grep~ and remove with their deps not required by others with ~sudo pacman -Rs pkgname~ (just ~pacman -Rs -p pkgname~ for dry-run)
(can also query for orphan/not-needed packages with ~pacman -Qdt~)
* troubleshooting
** chrooting into lvm system
a good reference link: https://gist.github.com/uglide/5f6f23903dac6b5f2567 but essentially
#+begin_src bash
vgscan # should show vg0 can also run pvscan
vgchange -ay # activates vg0 now lvscan shows the familiar lv_root lv_home and any snapshots that had been made
#+end_src

mount the lvm setup (similar to how it was done in the setup instructions above)
#+begin_src bash
mount /dev/vg0/lv_root /mnt

mount /dev/nvme0n1p2 /mnt/boot
mkdir /mnt/boot/efi || true
mount /dev/nvme0n1p1 /mnt/boot/efi
mount /dev/vg0/lv_home /mnt/home

mount --bind /dev /mnt/dev
mount --bind /proc /mnt/proc
mount --bind /sys /mnt/sys

mount -t efivarfs efivarfs /mnt/sys/firmware/efi/efivars # to use grub-install and such

#chroot /mnt /bin/bash # otherwise zsh default but should use arch-chroot anyways
arch-chroot /mnt
#+end_src

at the end
#+begin_src bash
exit
umount -R /mnt
shutdown now
#+end_src
** 20241110 upgrade rescue
ran
#+begin_src bash
grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck
grub-mkconfig -o /boot/grub/grub.cfg
#+end_src
above worked, i was able to confirm it looked sane by running ~efibootmgr -v~ i could see the =grub_uefi= as the first option and it seemed to point to the right place.
([[https://unix.stackexchange.com/questions/787335/arch-linux-not-booting-and-unable-to-grub-install-from-within-chroot][stack exchange solution thread]])
